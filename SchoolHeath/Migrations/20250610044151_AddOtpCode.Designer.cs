// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolHeath.Models;

#nullable disable

namespace SchoolHeath.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610044151_AddOtpCode")]
    partial class AddOtpCode
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolHealth.Models.OtpCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OtpCodes");
                });

            modelBuilder.Entity("SchoolHeath.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__46A222CD1FB9B110");

                    b.HasIndex(new[] { "Username" }, "UQ__Account__F3DBC572E2E40CDF")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckup", b =>
                {
                    b.Property<int>("CheckupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("checkup_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckupId"));

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("blood_pressure");

                    b.Property<DateOnly>("CheckupDate")
                        .HasColumnType("date")
                        .HasColumnName("checkup_date");

                    b.Property<double?>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("Vision")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vision");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("CheckupId")
                        .HasName("PK__HealthCh__C4A1A420E8A16C52");

                    b.HasIndex("NurseId");

                    b.HasIndex("StudentId");

                    b.ToTable("HealthCheckup", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("allergies");

                    b.Property<string>("ChronicDiseases")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("chronic_diseases");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("medical_history");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("VisionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vision_status");

                    b.HasKey("RecordId")
                        .HasName("PK__HealthRe__BFCFB4DDECB3EBF6");

                    b.HasIndex(new[] { "StudentId" }, "UQ__HealthRe__2A33069BA89E76A6")
                        .IsUnique();

                    b.ToTable("HealthRecord", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("ManagerId")
                        .HasName("PK__Manager__5A6073FC2DEF89C3");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Manager__46A222CC4A8BE7DA")
                        .IsUnique();

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicalEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date")
                        .HasColumnName("event_date");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("event_type");

                    b.Property<int?>("HandledBy")
                        .HasColumnType("int")
                        .HasColumnName("handled_by");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<string>("Outcome")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("outcome");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("EventId")
                        .HasName("PK__MedicalE__2370F727A4731A13");

                    b.HasIndex("HandledBy");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicalEvent", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicationRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("dosage");

                    b.Property<string>("Duration")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("duration");

                    b.Property<string>("Frequency")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("frequency");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("medicine_id");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("request_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("requested_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("RequestId")
                        .HasName("PK__Medicati__18D3B90F27AC9CFD");

                    b.HasIndex("MedicineId");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicationRequest", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicineInventory", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("medicine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("MedicineId")
                        .HasName("PK__Medicine__E7148EBBDF6A8772");

                    b.HasIndex("NurseId");

                    b.ToTable("MedicineInventory", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Cccd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("cccd");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("ParentId")
                        .HasName("PK__Parent__F2A608194B1C9FF0");

                    b.HasIndex(new[] { "Cccd" }, "UQ__Parent__37D42BFA7507EDB0")
                        .IsUnique();

                    b.HasIndex(new[] { "AccountId" }, "UQ__Parent__46A222CC005B578D")
                        .IsUnique();

                    b.ToTable("Parent", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.SchoolNurse", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nurse_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("NurseId")
                        .HasName("PK__SchoolNu__9BADE4996CBF50B1");

                    b.HasIndex(new[] { "AccountId" }, "UQ__SchoolNu__46A222CC01462613")
                        .IsUnique();

                    b.ToTable("SchoolNurse", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("BloodType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("blood_type");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("class");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<double?>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ParentCccd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("parent_cccd");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("school");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("student_code");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("StudentId")
                        .HasName("PK__Student__2A33069AE690E7F8");

                    b.HasIndex("ParentCccd");

                    b.HasIndex(new[] { "StudentCode" }, "UQ__Student__6DF33C4527BA2FF7")
                        .IsUnique()
                        .HasFilter("[student_code] IS NOT NULL");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.UserNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int")
                        .HasColumnName("recipient_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("NotificationId")
                        .HasName("PK__UserNoti__E059842F1A17C6FE");

                    b.HasIndex("RecipientId");

                    b.ToTable("UserNotification", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationConsent", b =>
                {
                    b.Property<int>("ConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consent_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsentId"));

                    b.Property<DateOnly>("ConsentDate")
                        .HasColumnType("date")
                        .HasColumnName("consent_date");

                    b.Property<bool>("ConsentStatus")
                        .HasColumnType("bit")
                        .HasColumnName("consent_status");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<string>("ParentCccd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("parent_cccd");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vaccine_name");

                    b.HasKey("ConsentId")
                        .HasName("PK__Vaccinat__E6C2B678FB5ACF69");

                    b.HasIndex("ParentCccd");

                    b.HasIndex("StudentId");

                    b.ToTable("VaccinationConsent", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationRecord", b =>
                {
                    b.Property<int>("VaccinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vaccination_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccinationId"));

                    b.Property<int>("AdministeredBy")
                        .HasColumnType("int")
                        .HasColumnName("administered_by");

                    b.Property<DateOnly>("DateOfVaccination")
                        .HasColumnType("date")
                        .HasColumnName("date_of_vaccination");

                    b.Property<DateOnly?>("FollowUpReminder")
                        .HasColumnType("date")
                        .HasColumnName("follow_up_reminder");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vaccine_name");

                    b.HasKey("VaccinationId")
                        .HasName("PK__Vaccinat__E588AFE79BCEAE2F");

                    b.HasIndex("AdministeredBy");

                    b.HasIndex("StudentId");

                    b.ToTable("VaccinationRecord", (string)null);
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthCheckup", b =>
                {
                    b.HasOne("SchoolHeath.Models.SchoolNurse", "Nurse")
                        .WithMany("HealthCheckups")
                        .HasForeignKey("NurseId")
                        .HasConstraintName("FK__HealthChe__nurse__52593CB8");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("HealthCheckups")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__HealthChe__stude__5165187F");

                    b.Navigation("Nurse");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.HealthRecord", b =>
                {
                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithOne("HealthRecord")
                        .HasForeignKey("SchoolHeath.Models.HealthRecord", "StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__HealthRec__stude__04E4BC85");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.Manager", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Account")
                        .WithOne("Manager")
                        .HasForeignKey("SchoolHeath.Models.Manager", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Manager__account__412EB0B6");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicalEvent", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "HandledByNavigation")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("HandledBy")
                        .HasConstraintName("FK__MedicalEv__handl__6754599E");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("MedicalEvents")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__MedicalEv__stude__66603565");

                    b.Navigation("HandledByNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicationRequest", b =>
                {
                    b.HasOne("SchoolHeath.Models.MedicineInventory", "Medicine")
                        .WithMany("MedicationRequests")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK__Medicatio__medic__628FA481");

                    b.HasOne("SchoolHeath.Models.Account", "RequestedByNavigation")
                        .WithMany("MedicationRequests")
                        .HasForeignKey("RequestedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Medicatio__reque__6383C8BA");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("MedicationRequests")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Medicatio__stude__619B8048");

                    b.Navigation("Medicine");

                    b.Navigation("RequestedByNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicineInventory", b =>
                {
                    b.HasOne("SchoolHeath.Models.SchoolNurse", "Nurse")
                        .WithMany("MedicineInventories")
                        .HasForeignKey("NurseId")
                        .HasConstraintName("FK__MedicineI__nurse__5CD6CB2B");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("SchoolHeath.Models.Parent", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Account")
                        .WithOne("Parent")
                        .HasForeignKey("SchoolHeath.Models.Parent", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__Parent__account___3D5E1FD2");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchoolHeath.Models.SchoolNurse", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Account")
                        .WithOne("SchoolNurse")
                        .HasForeignKey("SchoolHeath.Models.SchoolNurse", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK__SchoolNur__accou__44FF419A");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchoolHeath.Models.Student", b =>
                {
                    b.HasOne("SchoolHeath.Models.Parent", "ParentCccdNavigation")
                        .WithMany("Students")
                        .HasForeignKey("ParentCccd")
                        .HasPrincipalKey("Cccd")
                        .IsRequired()
                        .HasConstraintName("FK__Student__parent___4AB81AF0");

                    b.Navigation("ParentCccdNavigation");
                });

            modelBuilder.Entity("SchoolHeath.Models.UserNotification", b =>
                {
                    b.HasOne("SchoolHeath.Models.Account", "Recipient")
                        .WithMany("UserNotifications")
                        .HasForeignKey("RecipientId")
                        .IsRequired()
                        .HasConstraintName("FK__UserNotif__recip__6C190EBB");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationConsent", b =>
                {
                    b.HasOne("SchoolHeath.Models.Parent", "ParentCccdNavigation")
                        .WithMany("VaccinationConsents")
                        .HasForeignKey("ParentCccd")
                        .HasPrincipalKey("Cccd")
                        .IsRequired()
                        .HasConstraintName("FK__Vaccinati__paren__59FA5E80");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("VaccinationConsents")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Vaccinati__stude__59063A47");

                    b.Navigation("ParentCccdNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.VaccinationRecord", b =>
                {
                    b.HasOne("SchoolHeath.Models.SchoolNurse", "AdministeredByNavigation")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("AdministeredBy")
                        .IsRequired()
                        .HasConstraintName("FK__Vaccinati__admin__5629CD9C");

                    b.HasOne("SchoolHeath.Models.Student", "Student")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Vaccinati__stude__5535A963");

                    b.Navigation("AdministeredByNavigation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolHeath.Models.Account", b =>
                {
                    b.Navigation("Manager");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicationRequests");

                    b.Navigation("Parent");

                    b.Navigation("SchoolNurse");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("SchoolHeath.Models.MedicineInventory", b =>
                {
                    b.Navigation("MedicationRequests");
                });

            modelBuilder.Entity("SchoolHeath.Models.Parent", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("VaccinationConsents");
                });

            modelBuilder.Entity("SchoolHeath.Models.SchoolNurse", b =>
                {
                    b.Navigation("HealthCheckups");

                    b.Navigation("MedicineInventories");

                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("SchoolHeath.Models.Student", b =>
                {
                    b.Navigation("HealthCheckups");

                    b.Navigation("HealthRecord");

                    b.Navigation("MedicalEvents");

                    b.Navigation("MedicationRequests");

                    b.Navigation("VaccinationConsents");

                    b.Navigation("VaccinationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
